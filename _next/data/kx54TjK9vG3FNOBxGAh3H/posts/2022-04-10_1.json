{"pageProps":{"blog":{"id":"2022-04-10_1","title":"PHPで数値判定をするときは\"e\"に気をつけよう","publishedAt":"2022-04-10","body":"<p>指数表現を理解していなかったために間違ってしまった問題があったのでメモ。</p>\n<p>少し実装方法に触れてるのでアウトだったら消します。</p>\n<p>paizaラーニングの問題<a href=\"https://paiza.jp/works/challenges/513/retry\">B104:データのクレンジング</a>で次の条件がありました。</p>\n<pre><code>今回行うクレンジングでは、回答が 0 以上 100 以下の整数ではないデータをすべて取り除きます。なお、先頭に 0 がついているデータ (035 など) は有効です。\n</code></pre>\n<p>上記説明を簡単にいうと、インプットの文字列が0以上100以下の整数であるかをチェックする必要があるということです。<br>\nインプット文字列は以下の条件を満たします。</p>\n<ul>\n<li>-1,000 ≦ s_{i, j} ≦ 1,000 または、「英字小文字 / 数字」からなる文字列</li>\n<li>1 ≦ 文字列 s_{i, j} の長さ ≦ 5</li>\n</ul>\n<p>このチェックを以下のように実装しました。</p>\n<pre><code class=\"language-php\">function hoge(string $value): bool\n{\n    if (!is_numeric($value))\n    {\n        // 数値文字列判定\n        // $valueに英字が含まれている場合にfalseを返す\n        return false;\n    }\n\n    $value = intval($value);\n    // 0 以上 100 以下を判定\n    return ($value >= 0 &#x26;&#x26; $value &#x3C;= 100);\n}\n</code></pre>\n<p>しかし、この実装で提出するとエラーとなるパターンがありました。それが、eを含むときです。<br>\nPHPではeを指数表記として利用しています。例えば次の文字列は数値文字列として判定されます。</p>\n<ul>\n<li>3e1</li>\n<li>1e2</li>\n</ul>\n<p>REPLを使って確認してみます。</p>\n<pre><code>php > echo 3e1;\n30\nphp > echo 1e1;\n10\nphp > var_dump(is_numeric(\"3e1\"));\nbool(true)\nphp > var_dump(is_numeric(\"1e2\"));\nbool(true)\n</code></pre>\n<p>そのため、整数チェックをする場合、次のうちどちらかを採用するのが良さそうです。</p>\n<ul>\n<li>ctype_digit 関数で数値チェックをする</li>\n<li>preg_match 関数を使って正規表現でチェックする</li>\n</ul>"}},"__N_SSG":true}